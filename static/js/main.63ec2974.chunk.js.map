{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","reducers.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","hasErroR","Component","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","initialStateSearch","initialStateRobots","Boolean","window","location","hostname","match","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.63ec2974.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Card = ({name, email, id}) => {\r\n\t// const {name, email, id} = props;\r\n\treturn( \r\n\t  <div className='bg-light-blue dib br3 pa3 ma2 grow bw2 shadow-5 tc'>\r\n\t\t<img alt= 'robots'src= {`https://robohash.org/${id}?200x200`}/>\r\n\t\t<div>\r\n\t\t  <h2>{name}</h2>\r\n\t\t  <p>{email}</p>\r\n\t\t</div>\r\n\t  </div>\r\n\t)\r\n}\r\n\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n\treturn(\r\n\t  <div>\r\n\t\t{\r\n\t\t  robots.map((user, i) => {\r\n\t\t    return (\r\n\t\t\t\t<Card \r\n\t\t\t\tkey= {i} \r\n\t\t\t\tid={robots[i].id} \r\n\t\t\t\tname={robots[i].name} \r\n\t\t\t\temail={robots[i].email}\r\n\t\t\t    />\r\n\t\t\t);\r\n\t\t  })\r\n\t\t}\r\n\t  </div>\r\n\t);\r\n}\r\n\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n\treturn (\r\n\t  <div className= 'pa2'>\r\n\t\t<input \r\n\t\t     className='pa3 ba b--green bg-lightest-blue'\r\n\t\t\t type='search' \r\n\t\t\t placeholder='search robots'\r\n\t\t\t onChange={searchChange}\r\n\t\t/>\r\n\t  </div>\r\n\t);\r\n}\r\nexport default SearchBox;","import React from 'react';\r\n\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div style = {{overflowY : 'scroll', border: '5px solid black', height: '800px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError :false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error, info){\r\n\t\tthis.setState ({hasError : true})\r\n\t}\r\n\r\n\trender (){\r\n\t\tif (this.state.hasErroR){\r\n\t\t\treturn <h1>OOOPs. That is not good</h1>\r\n\t\t}\r\n\t\t    return this.props.children;\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundary;","import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport './App.css';\r\n\r\nimport {setSearchField, requestRobots} from '../actions.js';\r\n\r\nconst mapStateToProps = state => {\r\n\treturn {\r\n\t\tsearchField : state.searchRobots.searchField,\r\n\t\trobots: state.requestRobots.robots,\r\n\t\tisPending: state.requestRobots.isPending,\r\n\t\terror: state.requestRobots.error\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n\t\tonRequestRobots: () => dispatch(requestRobots())\r\n\t}\r\n\t\r\n}\r\n\r\nclass App extends Component {\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.props.onRequestRobots();\r\n\t}\r\n\r\n\r\n\trender() {\r\n\tconst { searchField, onSearchChange, robots, isPending} = this.props;\r\n\tconst filteredRobots = robots.filter(robot => {\r\n\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n\t})\r\n    return isPending ?\r\n\t\t <h1> Loading </h1> :\r\n\t\t (\r\n\t\t  <div className= 'tc'>\r\n\t\t\t <h1 className= 'f2'>RoboFriends</h1>\r\n\t\t\t <SearchBox searchChange={onSearchChange}/>\r\n\t\t\t <Scroll>\r\n\t\t\t \t<ErrorBoundary>\r\n\t\t\t \t\t\t<CardList robots= { filteredRobots} />\r\n\t\t\t    </ErrorBoundary>\r\n\t\t\t </Scroll>\r\n\t\t  </div>\r\n\t\t);\t\r\n\t}\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import {\r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n} from './constants.js';\r\n\r\n\r\nexport const setSearchField = (text) => ({\r\n\t\ttype: CHANGE_SEARCH_FIELD,\r\n\t\tpayload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n\tdispatch({type : REQUEST_ROBOTS_PENDING})\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t  .then(response => response.json())\r\n\t  .then(data => dispatch({type : REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n\t  .catch(error => dispatch ({type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED'; ","import {\r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n} from './constants.js';\r\n\r\n\r\nconst initialStateSearch = {\r\n\tsearchField: ''\r\n}\r\n\r\n\r\nexport const searchRobots = (state = initialStateSearch, action={}) => {\r\n\tswitch(action.type) {\r\n\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\t\treturn Object.assign({}, state, {searchField: action.payload});\r\n\t\tdefault: \r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nconst initialStateRobots ={\r\n\tisPending : false,\r\n\trobots: [],\r\n\terror: ''\r\n}\r\nexport const requestRobots =(state = initialStateRobots, action={}) => {\r\n\tswitch(action.type){\r\n\t\tcase REQUEST_ROBOTS_PENDING:\r\n\t\t\treturn Object.assign({}, state, {isPending : true})\r\n\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\t\treturn Object.assign({}, state, {robots: action.payload, isPending: false})\r\n\t\tcase REQUEST_ROBOTS_FAILED:\r\n\t\t\treturn Object.assign({}, state, {error: action.payload, isPending: false})\t\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider} from 'react-redux';\r\nimport  {createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport {createLogger} from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport { searchRobots, requestRobots } from './reducers.js';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\n\r\nconst logger = createLogger();\r\n\r\nconst rootReducer = combineReducers({searchRobots, requestRobots})\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\r\n\r\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister(); \r\n"],"sourceRoot":""}